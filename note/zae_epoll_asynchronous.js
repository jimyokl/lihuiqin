
Neovim 支持异步 linting（代码检查


一:------------------------------------------------------------------------------------------------------------------
~~~~~~~~~~~~~~~~~~~~~~~~epoll有异步功能吗----------------------------------~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


是的，`epoll` 是 Linux 系统中的一个高效的 I/O 多路复用机制，它本身具有异步功能，特别是在处理大量并发连接时非常高效。`epoll` 可以帮助开发者实现 **异步 I/O 操作**，使得程序在处理多个 I/O 操作时不需要阻塞等待，从而提高应用程序的性能。

### `epoll` 的异步特性

`epoll` 的异步功能主要体现在它如何通知应用程序有事件需要处理，而不是让应用程序主动去检查每个 I/O 描述符。这是通过以下几个特性实现的：

### 1. **非阻塞模式 (Non-blocking Mode)**

`epoll` 可以与非阻塞的文件描述符一起使用，使得 I/O 操作不会阻塞程序的执行。通常，`epoll` 是与 **非阻塞套接字**（non-blocking sockets）一起使用的，这意味着你可以调用 `epoll_wait()` 或 `epoll_pwait()` 来等待事件，而无需阻塞等待某个特定 I/O 操作完成。

* **非阻塞套接字**：当一个套接字在非阻塞模式下执行读或写操作时，如果没有数据可以读取或写入，操作会立即返回，而不是阻塞程序等待。

在这种模式下，`epoll` 提供了 **事件驱动** 的机制，意味着当某个文件描述符（例如网络连接）准备好进行 I/O 操作时，`epoll` 会通知应用程序。

### 2. **事件通知 (Event Notification)**

`epoll` 的工作方式是基于事件通知的，它会通知程序哪些文件描述符准备好了进行读写操作。具体来说，`epoll` 会返回一个包含有事件（如数据可读、数据可写等）的列表，应用程序可以根据这些事件决定执行什么操作。

* `EPOLLIN`：表示可以读取数据。
* `EPOLLOUT`：表示可以写入数据。
* `EPOLLERR`：表示出现了错误。
* `EPOLLHUP`：表示文件描述符被挂断。

`epoll` 会在事件就绪时通知你，而不是让程序反复查询某个文件描述符的状态，极大地减少了不必要的 CPU 消耗。

### 3. **边沿触发与水平触发 (Edge Triggered vs Level Triggered)**

* **水平触发 (Level Triggered)**：这是 `epoll` 的默认模式，表示只要文件描述符就绪，`epoll` 会一直返回该事件，直到事件被处理完。比如，当套接字有数据可读时，`epoll` 会一直通知你，直到你读取所有的数据。

* **边沿触发 (Edge Triggered)**：在边沿触发模式下，`epoll` 仅会在状态发生变化时通知你。例如，只有当套接字从不可读变为可读时，它才会通知你一次。这个模式适用于高性能应用，因为它减少了通知次数，但要求应用程序必须处理所有的可读数据，避免漏掉任何事件。

在实现异步 I/O 时，通常建议使用 **边沿触发模式**，因为它在高并发的情况下能够减少不必要的事件通知。

### 4. **`epoll_wait()` 的异步行为**

`epoll_wait()` 是 `epoll` 提供的主要函数之一，它用于等待文件描述符上的事件发生。这个函数的异步性质体现在以下几点：

* 当没有事件发生时，`epoll_wait()` 会阻塞，直到至少一个文件描述符准备好进行操作。
* 你可以使用 **非阻塞模式** 来调用 `epoll_wait()`，这时即使没有事件准备好，`epoll_wait()` 也会立即返回。这意味着应用程序可以在不阻塞的情况下进行其他任务。

### 5. **异步 I/O 模式 (AIO)**

`epoll` 本身并不直接提供 **真正的异步 I/O**，它仅提供了 **事件通知机制**，让应用程序能够在 I/O 操作准备好时进行处理。然而，可以将 `epoll` 与 Linux 的 AIO（异步 I/O）系统结合使用，来实现更加高级的异步 I/O 操作。

* **AIO**：Linux 提供了真正的异步 I/O API，允许程序发起一个 I/O 请求后立即返回，而不需要等待操作完成。`epoll` 可以用来监听这些异步 I/O 操作的完成事件。

### 总结

`epoll` 主要提供的是一种 **事件驱动** 和 **非阻塞** 的机制，能够通过事件通知来提高 I/O 操作的效率。通过与非阻塞 I/O 配合使用，`epoll` 可以实现异步 I/O 操作，特别适用于需要高并发 I/O 的网络服务器和应用程序。

* `epoll` 本身不是完全的异步 I/O 系统，但它能够通过事件通知机制和非阻塞 I/O 支持高效的并发处理。
* 对于更复杂的异步 I/O 操作，可以结合 Linux 的 **AIO** 系统来进一步实现。

因此，`epoll` 是一种强大的工具，特别是在需要处理大量并发连接的场景中，它能够高效地实现异步事件通知和非阻塞 I/O 操作。
